{
  "pluginType": "DB",
  "pluginId": "snowflake-plugin",
  "unpublishedAction": {
    "name": "setGoalDetail",
    "datasource": {
      "name": "Snowflake - REFERENCE_DEV",
      "pluginId": "snowflake-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "id": "Snowflake - REFERENCE_DEV",
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Marketing Goals Setting",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "INSERT INTO REFERENCE_DEV.PICNMIX_GOALS.PICNMIX_GOALS_DETAIL\nWITH \n\tarrays AS\n\t\t(\n\t\t\tSELECT\n\t\t\t\t'{{ InputGoalName.text }}' AS goal_name,\n\t\t\t\t'{{ SelectAgency.selectedOptionLabel }}' AS agency_name,\n\t\t\t\t'{{ SelectTeamName.selectedOptionLabel }}' AS team_name,\n\t\t\t\t'{{ SelectMarketingType.selectedOptionLabel }}' AS marketing_type,\n\t\t\t\t'{{ SelectMarketingGoal.selectedOptionLabel }}' AS marketing_goal,\n\t\t\t\t'{{ SelectMarketingGoal.selectedOptionValue }}' AS marketing_goal_code,\n\t\t\t\t'{{ SelectTrackCode.selectedOptionLabel }}' AS track_code,\n\t\t\t\t'{{ SelectBrandingCode.selectedOptionLabel }}' AS branding_code,\n\t\t\t\t'{{ SelectPlacementCode.selectedOptionLabel }}' AS placement_code,\n                array_construct(\n                    {{ \n                        (function() {\n                            var\n                            arr = [],\n                            input_start_date = DatePickerBudgetStartDate.selectedDate,\n                            input_end_date = DatePickerBudgetEndDate.selectedDate,\n                            dt = new Date(input_start_date),\n                            end = new Date(input_end_date);\n                        \n                        while (dt <= end) {\n                            var new_dt = new Date(dt)\n                            arr.push(moment.utc(new_dt.toISOString()).format('YYYY-MM-DD'));\n                            dt.setDate(dt.getDate() + 1);\n                        }\n                        \n                        return \"'\" + arr.join(\"','\") + \"'\"\n\n                        })()\n                    }}\n                ) as dates_array,\n\t\t\t\tarray_construct({{ \"'\" + MultiTreeSelect1.selectedOptionValues.join(\"','\") + \"'\"}}) as games_array,\n\t\t\t\tarray_construct({{ \"'\" + MultiTreeSelect2.selectedOptionLabels.join(\"','\") + \"'\" }}) as sub_channels_array,\n\t\t\t\tarray_construct({{ \"'\" + MultiTreeSelect3.selectedOptionValues.join(\"','\") + \"'\" }}) as countries_array,\n\t\t\t\t{{ InputBudget.text }} as target_spend_input\n\t\t), \n\n\tdims AS\n\t\t(\n\t\t\tSELECT\n\t\t\t\ta.goal_name,\n\t\t\t\ta.agency_name,\n\t\t\t\ta.team_name,\n\t\t\t\ta.marketing_type,\n\t\t\t\ta.marketing_goal,\n\t\t\t\ta.marketing_goal_code,\n\t\t\t\ta.track_code,\n\t\t\t\ta.branding_code,\n\t\t\t\ta.placement_code,\n                CAST(dates_flattened.value AS VARCHAR()) AS goal_date,\n\t\t\t\tCAST(games_flattened.value AS VARCHAR()) AS game,\n\t\t\t\tCAST(sub_channels_flattened.value AS VARCHAR()) AS sub_channel,\n\t\t\t\tCAST(countries_flattened.value AS VARCHAR()) as country,\n\t\t\t\ta.target_spend_input\n\t\t\tFROM \n\t\t\t\tarrays a,\n                lateral flatten(input => a.dates_array) dates_flattened,\n\t\t\t\tlateral flatten(input => a.games_array) games_flattened,\n\t\t\t\tlateral flatten(input => a.sub_channels_array) sub_channels_flattened,\n\t\t\t\tlateral flatten(input => a.countries_array) countries_flattened\n\t\t),\n\n\tseries_c AS\n\t\t(\n\t\t\tSELECT count(1) as series from dims\n\t\t)\n\nSELECT\n    g.goal_id,\n    d.goal_date,\n\td.goal_name,\n\td.agency_name,\n\td.team_name,\n\td.marketing_type,\n\td.marketing_goal,\n\td.marketing_goal_code,\n\td.track_code,\n\td.branding_code,\n\td.placement_code,\n\td.game,\n\td.sub_channel,\n\td.country,\n\td.target_spend_input,\n\tCASE\n\t\tWHEN \n\t\t\t{{SwitchTargetSpendDistribution.isSwitchedOn}} = 'true'\n\t\tTHEN\n\t\t\td.target_spend_input / s.series\n\t\tELSE\n\t\t\td.target_spend_input\n\tEND as target_spend_distribution,\n    CASE\n        WHEN\n            {{SwitchTargetSpendDistribution.isSwitchedOn}} = 'true'\n        THEN\n            (1 / s.series)*100\n        ELSE\n            1*100\n    END AS distribution_pct\nFROM \n\tdims d\nJOIN\n    REFERENCE_DEV.PICNMIX_GOALS.PICNMIX_GOALS g\n    ON d.goal_name = g.goal_name\nCROSS JOIN\n\tseries_c s;"
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "\"'\" + MultiTreeSelect1.selectedOptionValues.join(\"','\") + \"'\"",
      "\"'\" + MultiTreeSelect2.selectedOptionLabels.join(\"','\") + \"'\"",
      "\"'\" + MultiTreeSelect3.selectedOptionValues.join(\"','\") + \"'\"",
      "(function() {\n                            var\n                            arr = [],\n                            input_start_date = DatePickerBudgetStartDate.selectedDate,\n                            input_end_date = DatePickerBudgetEndDate.selectedDate,\n                            dt = new Date(input_start_date),\n                            end = new Date(input_end_date);\n                        \n                        while (dt <= end) {\n                            var new_dt = new Date(dt)\n                            arr.push(moment.utc(new_dt.toISOString()).format('YYYY-MM-DD'));\n                            dt.setDate(dt.getDate() + 1);\n                        }\n                        \n                        return \"'\" + arr.join(\"','\") + \"'\"\n\n                        })()",
      "InputBudget.text",
      "InputGoalName.text",
      "SelectAgency.selectedOptionLabel",
      "SelectBrandingCode.selectedOptionLabel",
      "SelectMarketingGoal.selectedOptionLabel",
      "SelectMarketingGoal.selectedOptionValue",
      "SelectMarketingType.selectedOptionLabel",
      "SelectPlacementCode.selectedOptionLabel",
      "SelectTeamName.selectedOptionLabel",
      "SelectTrackCode.selectedOptionLabel",
      "SwitchTargetSpendDistribution.isSwitchedOn"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Marketing Goals Setting_setGoalDetail",
  "deleted": false,
  "gitSyncId": "62ab95f845de0578f1dac8db_62ab95f845de0578f1dac8e7"
}